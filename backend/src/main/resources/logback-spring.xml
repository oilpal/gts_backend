<?xml version="1.0" encoding="UTF-8"?> 

<configuration scan="true" scanPeriod="60 seconds">
	<!-- 60초마다 설정 파일의 변경을 확인 하여 변경시 갱신 -->
	
	<!--springProfile 태그를 사용하면 logback 설정파일에서 복수개의 프로파일을 설정할 수 있다. -->
	<!--Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다. -->
	<springProfile name="local">
		<property resource="logback-local.properties" />
	</springProfile>
	
	<springProfile name="dev">
		<property resource="logback-dev.properties" />
	</springProfile>
	<!-- logging.level.root  -->
	<springProperty scope="context" name="LOG_LEVEL" source="com.neofect.gts" /> 
	
	<!-- log file path -->
	<property name="LOG_PATH" value="${log.config.path}" /> 
	
	<!-- log file name -->
	<property name="LOG_FILE_NAME" value="${log.config.filename}" /> 
	
	<!-- err log file name -->
	<property name="ERR_LOG_FILE_NAME" value="err_log" /> 
	
	<!-- pattern -->
	<property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n" /> 
	
	<!-- Console Appender -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
	</appender> 
	
	<!-- File Appender -->
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
		<!-- 파일경로 설정 -->
		<file>${LOG_PATH}/${LOG_FILE_NAME}.log</file> 
		
		<!-- 출력패턴 설정 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder> 
		
		<!-- Rolling 정책 -->
		<rollingPolicy	class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
			<!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
			<fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log	</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> <!-- 파일당 최고 용량 kb, mb, gb -->
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy> 
			
			<!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
			<maxHistory>30</maxHistory> 
			<!--<MinIndex>1</MinIndex> <MaxIndex>10</MaxIndex> -->
		</rollingPolicy>
	</appender> 
	
	<!-- 에러의 경우 파일에 로그 처리 -->
	<appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>error</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder> 
		
		<!-- Rolling 정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
			<!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
			<fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy	class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
				<!-- 파일당 최고 용량 kb, mb, gb -->
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy> 
			<!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
			<maxHistory>60</maxHistory>
		</rollingPolicy>
		
	</appender> 
	
	<!-- root레벨 설정 -->
	<root level="${LOG_LEVEL}">
		<!-- <appender-ref ref="CONSOLE" /> -->
		<appender-ref ref="FILE" />
		<appender-ref ref="Error" />
	</root> 
	
	<!-- 특정패키지 로깅레벨 설정 -->
	<!-- <logger name="org.apache.ibatis" level="DEBUG"	additivity="false">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="FILE" />
		<appender-ref ref="Error" />
	</logger> -->
	
	<!-- template -->
	<include resource="org/springframework/boot/logging/logback/base.xml"/>
	
	<!-- SQL만 log. prepared statement에서 실행된 SQL은 해당 위치에 바인딩된 argument로 자동으로 표시 -->
	<logger name="jdbc.sqlonly" level="info" />
	
	<!-- 실행시간과 SQL log -->
	<logger name="jdbc.sqltiming" level="off" />
	
	<!-- ResultSets을 제외한 모든 JDBC 호출 log -->
	<logger name="jdbc.audit" level="off" />
	
	<!--  ResultSet 객체에 대한 모든 호출이 기록 -->
	<logger name="jdbc.resultset" level="off" />
	
	<!-- 테이블로 jdbc 결과를 log. Level debug는 result set에서 읽지 않은 값을 채움 -->
	<logger name="jdbc.resultsettable" level="off" />
	
	<!-- connection open, close 이벤트를 기록하고 열려있는 모든 connection number를 dump. connection 누수 문제를 해결하는데 매우 유용 -->
	<logger name="jdbc.connection" level="off" />
	
</configuration>

